<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker-Jenkins on Magic</title>
    <link>/tags/docker-jenkins/</link>
    <description>Recent content in Docker-Jenkins on Magic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/docker-jenkins/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Gitlab</title>
      <link>/2019/docker-gitlab/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/docker-gitlab/</guid>
      <description>安装 Gitlab  目录类似 Jenkins，使用 docker-compose 安装  version: &#39;3&#39; services: docker-gitlab: image: &#39;twang2218/gitlab-ce-zh:9.4&#39; restart: &#39;no&#39; container_name: gitlab hostname: &#39;gitlab.xxxxx.com&#39; environment: TZ: &#39;Asia/Shanghai&#39; GITLAB_OMNIBUS_CONFIG: | external_url &#39;http://gitlab.xxxxxx.com&#39; unicorn[&#39;worker_timeout&#39;] = 60 unicorn[&#39;worker_processes&#39;] = 2 gitlab_rails[&#39;time_zone&#39;] = &#39;Asia/Shanghai&#39; gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 26 nginx[&#39;client_max_body_size&#39;] = &#39;250m&#39; ports: - &#39;81:80&#39; - &#39;443:443&#39; - &#39;26:22&#39; volumes: - /home/gitlab/gitlab_home/config:/etc/gitlab - /home/gitlab/gitlab_home/data:/var/opt/gitlab - /home/gitlab/gitlab_home/logs:/var/log/gitlab  在当前目录下运行 docker-compose up -d
Nginx 代理 upstream gitlab { server 116.62.201.97:81; } server { listen 80; server_name gitlab.</description>
    </item>
    
    <item>
      <title>Docker Jenkins</title>
      <link>/2019/docker-jenkins/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/docker-jenkins/</guid>
      <description>安装 jenkins 在安装jenkins我选择了使用docker-compose，docker-compose 是一个用来把 docker 自动化的东西
有了 docker-compose 你可以把所有繁复的 docker 操作全都一条命令，自动化的完成。
首先我们需要在服务器上创建一个目录机构 /home/jenkins - docker-compose.yml - jenkins-home  接下来我们来编写 docker-compose.yml 安装jenkins version: &#39;3&#39; # 指定 docker-compose.yml 文件的写法格式 services: # 多个容器集合 docker_jenkins: user: root # 为了避免一些权限问题 在这我使用了root restart: always # 重启方式 image: jenkins/jenkins:lts # 指定服务所使用的镜像 在这里我选择了 LTS (长期支持) container_name: jenkins # 容器名称 ports: # 对外暴露的端口定义 - &#39;8899:8080&#39; - &#39;50000:50000&#39; volumes: # 卷挂载路径 - /home/jenkins/jenkins_home/:/var/jenkins_home # 这是我们一开始创建的目录挂载到容器内的jenkins_home目录 - /var/run/docker.sock:/var/run/docker.sock - /usr/bin/docker:/usr/bin/docker # 这是为了我们可以在容器内使用docker命令 - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose # 同样的这是为了使用docker-compose命令  我们需要进入到 jenkins 目录下执行：docker-compose up -d，开启守护进程后台执行(停止 docker-compose down)这个命令会帮我们自动拉取镜像并配置，不出意外你现在可以打开你的服务器地址 http://xxxxxxx:端口号 就能看到这个界面：</description>
    </item>
    
  </channel>
</rss>