<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>easy on Magic</title>
    <link>/tags/easy/</link>
    <description>Recent content in easy on Magic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/easy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>链表-leetCode-反转链表</title>
      <link>/2019/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>反转链表 描述  反转一个单链表。  示例:输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL分析 一、迭代
 第一个节点无前置节点 所以需要声明初始化一个前置节点prev 开始迭代，结束提交为 当前节点不为null 先把当前节点后置节点变为当前节点的前置节点 然后把前置pre变为当前节点 因为下一次所需 再把当前节点设为后置节点  在遍历列表时，将当前节点的 next 指针改为指向前一个元素。由于节点没有引用其上一个节点，因此必须事先存储其前一个元素。在更改引用之前，还需要另一个指针来存储下一个节点。不要忘记在最后返回新的头引用！
/*** @param {ListNode} head* @return {ListNode}*/var reverseList = function(head) {let cur = head;let pre = null;while(cur) {let temp = cur.next; // 保存当前节点的后置节点 之后循环到下一个节点需要 cur.next = pre;pre = cur;cur = temp;}return pre;};二、递归</description>
    </item>
    
    <item>
      <title>链表-leetCode-环形链表</title>
      <link>/2019/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</guid>
      <description>环形链表 描述 给定一个链表，判断链表中是否有环。
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。
示例 1：输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。示例 2：输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。示例 3：输入：head = [1], pos = -1输出：false解释：链表中没有环。分析  一、由上到下给每一层遍历到的结点做上标记，如果在下一个结点中出现了这个标记，则表示存在环形结构。如果不想篡改原始数据，可以先用 temp 保存。  /*** @param {ListNode} head* @return {boolean}*/var hasCycle = function(head) {while (head) {if (head.val === &amp;#39;k.top&amp;#39;) return true;head.</description>
    </item>
    
  </channel>
</rss>