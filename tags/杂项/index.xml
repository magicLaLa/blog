<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂项 on Magic</title>
    <link>/tags/%E6%9D%82%E9%A1%B9/</link>
    <description>Recent content in 杂项 on Magic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 18 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E6%9D%82%E9%A1%B9/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>组件设计</title>
      <link>/2019/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/</guid>
      <description> 根据 UI 划分组件层级  可以将组件当作一种函数或者是对象来考虑，根据*单一功能原则*来判定组件的范围。也就是说，一个组件原则上只能负责一个功能。如果它需要负责更多的功能，这时候就应该考虑将它拆分成更小的组件。 可以尝试自下而上构建应用。 通过问自己以下三个问题，你可以逐个检查相应数据是否属于 state：  该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。 该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。 你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。   </description>
    </item>
    
  </channel>
</rss>