(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{170:function(t,e,_){"use strict";_.r(e);var i=_(0),v=Object(i.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),_("p",[t._v("浏览器打开即为打开一个进程（任务管理器查看），浏览器就是多进程、多线程的，浏览器打开后占用CPU的资源，可将这些资源分别分配给不同的tab页面进行并发处理，互不影响；如：一个浏览器打开多个窗口，多个窗口同时运行网页（浏览器中任务管理查看）")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),_("p",[t._v("作为主进程，主要负责页面管理以及其他进程的创建及销毁，常驻的线程有：(工厂-> 部门)")]),t._v(" "),_("center",[t._v("手机工厂(浏览器)[进程]")]),t._v(" "),_("center",[t._v("↓")]),t._v(" "),_("center",[t._v("造手机部 ----- 造手机壳部 ----- 造膜部等(tab页面)[进程]")]),t._v(" "),_("center",[t._v("↓")]),t._v(" "),_("center",[t._v("各个岗位(html、css、js、事件触发等)[线程]")]),t._v(" "),t._m(6),t._v(" "),_("p",[t._v("多个线程之间配合工作，各司其职。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),_("p",[t._v("异步任务分为宏任务和微任务，宏任务队列可以有多个，微任务队列只有一个。")]),t._v(" "),_("p",[t._v("宏任务：")]),t._v(" "),t._m(15),t._v(" "),_("p",[t._v("微任务:")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),_("p",[t._v("当一个异步任务入栈时，主线程判断该任务为异步任务，并把该任务交给异步处理模块处理，当异步处理模块处理完达到触发条件时，根据任务的类型，将回调函数压入任务队列。")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),_("p",[t._v("回顾单线程异步机制：")]),t._v(" "),t._m(21),t._v(" "),_("p",[t._v("那么问题就来了，我们有宏任务和微任务，先执行谁呢？")]),t._v(" "),t._m(22),t._v(" "),t._m(23)],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-loop","aria-hidden":"true"}},[this._v("#")]),this._v(" Event Loop")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"事件循环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件循环机制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"线程与进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程","aria-hidden":"true"}},[this._v("#")]),this._v(" 线程与进程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("ul",[e("li",[this._v("进程：CPU资源分配的最小单位")]),this._v(" "),e("li",[this._v("线程：CPU调度的最小单位")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"/img/chrome.png",alt:"浏览器进程"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"浏览器进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器进程","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器进程")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("blockquote",[_("ul",[_("li",[t._v("GUI渲染线程")])]),t._v(" "),_("blockquote",[_("ol",[_("li",[t._v("主要负责页面的渲染，解析HTML、CSS，构建DOM树，布局和绘制等。")]),t._v(" "),_("li",[t._v("当界面需要重绘或者由于某种操作引发回流时，将执行该线程。")]),t._v(" "),_("li",[t._v("该线程与JS引擎线程互斥，当执行JS引擎线程时，GUI渲染会被挂起，当任务队列空闲时，JS引擎才会去执行 GUI 渲染。")])])]),t._v(" "),_("ul",[_("li",[t._v("JS引擎线程")])]),t._v(" "),_("blockquote",[_("ol",[_("li",[t._v("该线程当然是主要负责处理 JavaScript脚本，执行代码；")]),t._v(" "),_("li",[t._v("也是主要负责执行准备好待执行的事件，即定时器计数结束，或者异步请求成功并返回正确时，将依次进入任务队列，等待JS引擎线程的执行；")]),t._v(" "),_("li",[t._v("当然，该线程与 GUI渲染线程互斥，当 JS引擎线程执行 JavaScript脚本时间过长，将导致页面渲染的阻塞。")])])]),t._v(" "),_("ul",[_("li",[t._v("事件触发线程")])]),t._v(" "),_("blockquote",[_("ol",[_("li",[t._v("主要负责将准备好的事件交给Js引擎线程执行")]),t._v(" "),_("li",[t._v("比如setTimeout定时器计数结束，ajax等异步请求成功并出发回调函数，或者用户出发点击事件，该线程将会整装待发的事件依次加入到任务队列的队尾，等待Js引擎线程的执行")])])]),t._v(" "),_("ul",[_("li",[t._v("定时器触发线程")])]),t._v(" "),_("blockquote",[_("ol",[_("li",[t._v("顾名思义，负责执行异步定时器一类的函数的线程，如： setTimeout，setInterval。")]),t._v(" "),_("li",[t._v("主线程依次执行代码时，遇到定时器，会将定时器交给该线程处理，当计数完毕后，事件触发线程会将计数完毕后的事件加入到任务队列的尾部，等待JS引擎线程执行。")])])]),t._v(" "),_("ul",[_("li",[t._v("HTTP请求线程")])]),t._v(" "),_("blockquote",[_("ol",[_("li",[t._v("顾名思义，负责执行异步请求一类的函数的线程，如： Promise，axios，ajax等。")]),t._v(" "),_("li",[t._v("主线程依次执行代码时，遇到异步请求，会将函数交给该线程处理，当监听到状态码变更，如果有回调函数，事件触发线程会将回调函数加入到任务队列的尾部，等待JS引擎线程执行。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"render-进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#render-进程","aria-hidden":"true"}},[this._v("#")]),this._v(" Render 进程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("浏览器渲染进程（浏览器内核），主要负责页面的渲染、JS执行以及事件的循环。\n(render给与，表达  总经办 -> 分管各个部门的副经理)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"同步和异步任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步任务","aria-hidden":"true"}},[this._v("#")]),this._v(" 同步和异步任务")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("strong",[t._v("同步任务")]),t._v(" 即可以立即执行的任务，例如 console.log() 打印一条日志、声明一个变量或者执行一次加法操作等。")]),t._v(" "),_("li",[_("strong",[t._v("异步任务")]),t._v(" 相反不会立即执行的事件任务。异步任务包括宏任务("),_("code",[t._v("setTimeout")]),t._v("、"),_("code",[t._v("setInterval")]),t._v(")和微任务("),_("code",[t._v("Promise")]),t._v("、"),_("code",[t._v("async")]),t._v("和"),_("code",[t._v("await")]),t._v(")等。")]),t._v(" "),_("li",[t._v("常见的异步操作：")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("blockquote",[_("ul",[_("li",[t._v("ajax")]),t._v(" "),_("li",[t._v("DOM的事件操作")]),t._v(" "),_("li",[t._v("setTimeout")]),t._v(" "),_("li",[t._v("Promise 的then方法")]),t._v(" "),_("li",[t._v("Node的读取文件")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("同步任务和异步任务的执行流程：\n"),e("img",{attrs:{src:"/img/eventLoop1.png",alt:"浏览器进程"}})])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("strong",[t._v("栈")]),t._v(" 就像是一个容器，任务都是在栈中执行。")]),t._v(" "),_("li",[_("strong",[t._v("主线程")]),t._v(" 就像是操作员，负责执行栈中的任务。")]),t._v(" "),_("li",[_("strong",[t._v("任务队列")]),t._v(" 就像是等待被加工的物品。")]),t._v(" "),_("li",[t._v("异步任务完成注册后会将回调函数加入任务队列等待主线程执行。")]),t._v(" "),_("li",[t._v("执行栈中的同步任务执行完毕后，会查看并读取任务队列中的事件函数，于是任务队列的函数结束等待状态，进入执行栈，开始执行。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"宏任务和微任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务","aria-hidden":"true"}},[this._v("#")]),this._v(" 宏任务和微任务")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("script(全局任务)， setTimeout， setInterval， setImmediate， I/O， UI rendering")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("process.nextTick， Promise.then()， Object.observe， MutationObserver")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("在微任务中 process.nextTick 优先级高于Promise")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("如果是宏任务，则新增一个宏任务队列，任务队列中的宏任务可以有多个来源。")]),this._v(" "),e("li",[this._v("如果是微任务，则直接压入微任务队列。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("所以上图的任务队列可以继续细化一下：\n"),e("img",{attrs:{src:"/img/eventLoop2.png",alt:"任务队列"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"event-loop-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Event Loop")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[t._v("js全局任务开始，任务一次进入执行栈，被主线程执行，执行完毕后出栈")]),t._v(" "),_("li",[t._v("遇到异步任务，交给异步处理模块处理，如:"),_("code",[t._v("setTimeout")]),t._v("，"),_("code",[t._v("ajax")])]),t._v(" "),_("li",[t._v("当异步任务达到可执行状态时，事件触发线程将回调函数加入任务队列，等执行栈为空时，在依次进入执行栈中被执行")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("异步任务开始执行从全局任务开始执行（异步里边的var url = '' ....），这些都属于宏任务，执行时js引擎会检查执行栈是否空闲，如果不空闲继续检查，当同步任务执行完毕，执行栈空闲下来,js引擎又会检查任务队列是否为空，如果不为空，会先提取任务队列中的微任务进行执行，如果为空，则继续检查；")]),this._v(" "),e("li",[this._v("微任务队列执行完毕之后，引擎检查到主线程又空闲下来了，再去任务队列提取排在最前的宏任务；")]),this._v(" "),e("li",[this._v("执行宏任务的过程中 ，遇到了微任务，在将这个微任务加入任务队列中；")]),this._v(" "),e("li",[this._v("待执行栈空闲时，再次去提取上边加入的微任务进行执行，该微任务执行结束后，又去检测任务队列中的任务，如果为空，提取最前边的任务，放入执行栈执行，如果为空了，就继续检查任务队列，以此类推。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("（另）：可放大宏任务（var xxx= ...），将全局js任务和宏任务放一起理解，第一步宏任务先执行，遇到"),e("code",[this._v("setTimeout")]),this._v("同样放入事件队列，执行结束后，引擎检查微任务，将微任务放入执行栈执行，执行结束后，在第二轮 检查事件队列的是否含有宏任务，如有，放入执行栈执行，依次循环。")])}],!1,null,null,null);v.options.__file="EventLoop.md";e.default=v.exports}}]);